
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://didvmdhyxltjjnxlbmxy.supabase.co";
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRpZHZtZGh5eGx0ampueGxibXh5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4Njg4NzMsImV4cCI6MjA1ODQ0NDg3M30.jr9FcI2qaO0bVWgKftxNIZLcqtVt-x_dr9e_PEfyoq4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  // Add global error handling and logging
  global: {
    fetch: (...args: [RequestInfo | URL, RequestInit?]) => {
      return fetch(...args).catch(err => {
        console.error('Supabase fetch error:', err);
        throw err;
      });
    }
  }
});

// Add additional debugging information
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session?.user?.email);
});

// Initialize storage buckets if needed
const initializeStorage = async () => {
  try {
    // Check if required buckets exist
    const requiredBuckets = ['user_documents', 'government_ids', 'speed_tests', 'system_settings'];
    
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error listing storage buckets:', error);
      return;
    }
    
    const existingBuckets = buckets?.map(b => b.name) || [];
    
    // Create any missing buckets
    for (const bucket of requiredBuckets) {
      if (!existingBuckets.includes(bucket)) {
        console.log(`Creating storage bucket: ${bucket}`);
        await supabase.storage.createBucket(bucket, {
          public: true,  // Make public so images can be viewed
          fileSizeLimit: 10485760,  // 10MB limit
        });
      }
    }
    
    console.log('Storage buckets initialized successfully');
  } catch (err) {
    console.error('Error initializing storage buckets:', err);
  }
};

// Attempt to initialize storage when the client loads
initializeStorage().catch(console.error);
