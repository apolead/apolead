
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://didvmdhyxltjjnxlbmxy.supabase.co";
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRpZHZtZGh5eGx0ampueGxibXh5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4Njg4NzMsImV4cCI6MjA1ODQ0NDg3M30.jr9FcI2qaO0bVWgKftxNIZLcqtVt-x_dr9e_PEfyoq4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  // Add global error handling and logging with retry logic
  global: {
    fetch: (...args: [RequestInfo | URL, RequestInit?]) => {
      let retries = 0;
      const maxRetries = 2;
      
      const fetchWithRetry = async (): Promise<Response> => {
        try {
          const response = await fetch(...args);
          
          // Log info about the response for debugging
          if (!response.ok) {
            console.error(`Supabase fetch error: ${response.status} ${response.statusText}`, 
              `URL: ${typeof args[0] === 'string' ? args[0] : 'complex URL'}`,
              `Method: ${args[1]?.method || 'GET'}`
            );
            
            // For some specific status codes, retry the request
            if ((response.status === 429 || response.status >= 500) && retries < maxRetries) {
              retries++;
              const delay = Math.min(1000 * (2 ** retries), 5000); // Exponential backoff with max 5s
              console.log(`Retrying request (${retries}/${maxRetries}) after ${delay}ms`);
              await new Promise(resolve => setTimeout(resolve, delay));
              return fetchWithRetry();
            }
          }
          
          return response;
        } catch (err) {
          console.error('Supabase fetch network error:', err);
          
          if (retries < maxRetries) {
            retries++;
            const delay = Math.min(1000 * (2 ** retries), 5000); // Exponential backoff with max 5s
            console.log(`Retrying request (${retries}/${maxRetries}) after ${delay}ms due to network error`);
            await new Promise(resolve => setTimeout(resolve, delay));
            return fetchWithRetry();
          }
          
          throw err;
        }
      };
      
      return fetchWithRetry();
    }
  }
});

// Add additional debugging information
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session?.user?.email);
});

// Set up a global error event listener instead of using the non-existent handleBrowserError property
window.addEventListener('unhandledrejection', (event) => {
  if (event.reason && (
    // Check if the error is related to Supabase
    (typeof event.reason.message === 'string' && event.reason.message.includes('supabase')) ||
    (event.reason.name && event.reason.name.includes('Supabase'))
  )) {
    console.error('Supabase unhandled rejection:', event.reason);
  }
});
